import { Router } from "express";
import { findRelevantDocs } from "../database";
import OpenAI from "openai";

export const chatRouter = Router();
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

chatRouter.post("/query", async (req, res) => {
  try {
    const { question } = req.body;

    if (!question) {
      return res.status(400).json({ error: "Question is required" });
    }

    const relevantDocs = await findRelevantDocs(question, 3);

    let messages: OpenAI.Chat.ChatCompletionMessageParam[] = [
      {
        role: "system" as const,
        content:
          'ÎãπÏã†ÏùÄ 3billionÏùò ÏÇ¨ÎÇ¥ Ï±óÎ¥á "Ï∞ΩÍ±¥Ïî®"ÏûÖÎãàÎã§. Ï†úÍ≥µÎêú Î¨∏ÏÑúÍ∞Ä ÏûàÏúºÎ©¥ Í∑∏Í≤ÉÏùÑ Í∏∞Î∞òÏúºÎ°ú ÎãµÎ≥ÄÌïòÍ≥†, ÏóÜÏúºÎ©¥ ÏùºÎ∞òÏ†ÅÏù∏ ÏßÄÏãùÏúºÎ°ú ÎãµÎ≥ÄÌïòÎêò, Î¨∏ÏÑúÎ•º Ï∞æÏßÄ Î™ªÌñàÎã§Î©¥ Í∑∏ ÏÇ¨Ïã§ÏùÑ Î™ÖÏãúÌï¥Ï£ºÏÑ∏Ïöî.',
      },
    ];

    if (relevantDocs.length > 0) {
      console.log(
        `üìö Using ${relevantDocs.length} documents for context (similarity may be low)`
      );

      const context = relevantDocs
        .map(
          (doc, index) =>
            `Î¨∏ÏÑú ${index + 1} (${
              doc.originalFilename
            }, Ïú†ÏÇ¨ÎèÑ: ${doc.similarity.toFixed(3)}):\n${doc.content}`
        )
        .join("\n\n");

      messages.push({
        role: "user" as const,
        content: `Îã§Ïùå Î¨∏ÏÑúÎì§ÏùÑ Ï∞∏Í≥†ÌïòÏó¨ ÏßàÎ¨∏Ïóê ÎãµÎ≥ÄÌï¥Ï£ºÏÑ∏Ïöî. Î¨∏ÏÑúÏùò Ïú†ÏÇ¨ÎèÑÍ∞Ä ÎÇÆÏùÑ Ïàò ÏûàÏúºÎãà, Í¥ÄÎ†®ÏÑ±Ïù¥ ÎÜíÏùÄ Ï†ïÎ≥¥Îßå ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî:\n\n${context}\n\nÏßàÎ¨∏: ${question}`,
      });
    } else {
      console.log("üìö No documents found, using general knowledge");
      messages.push({
        role: "user" as const,
        content: `Ï∞∏Í≥†Ìï† Î¨∏ÏÑúÍ∞Ä ÏóÜÏäµÎãàÎã§. ÏùºÎ∞òÏ†ÅÏù∏ ÏßÄÏãùÏúºÎ°ú Îã§Ïùå ÏßàÎ¨∏Ïóê ÎãµÎ≥ÄÌï¥Ï£ºÏÑ∏Ïöî: ${question}`,
      });
    }

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages,
      max_tokens: 1000,
      temperature: 0.7,
    });

    const answer = completion.choices[0].message.content;

    res.json({
      answer,
      hasRelevantDocs: relevantDocs.length > 0,
      documentCount: relevantDocs.length,
      documents: relevantDocs.map((doc) => ({
        filename: doc.originalFilename,
        similarity: doc.similarity,
      })),
    });
  } catch (error) {
    console.error("‚ùå Error in chat query:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});
