import { Router } from "express";
import { findRelevantDocs } from "../database";
import { generateGoogleDriveLink } from "../utils/google-drive";
import OpenAI from "openai";

export const chatRouter = Router();
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

chatRouter.post("/query", async (req, res) => {
  try {
    const { question } = req.body;

    if (!question) {
      return res.status(400).json({ error: "Question is required" });
    }

    const relevantDocs = await findRelevantDocs(question, 3);

    let messages: OpenAI.Chat.ChatCompletionMessageParam[] = [
      {
        role: "system" as const,
        content: `ÎãπÏã†ÏùÄ 3billionÏùò ÏÇ¨ÎÇ¥ Ï±óÎ¥á "Ï∞ΩÍ±¥Ïî®"ÏûÖÎãàÎã§. 

Ï†úÍ≥µÎêú Î¨∏ÏÑúÎ•º Í∏∞Î∞òÏúºÎ°ú ÏßàÎ¨∏Ïóê ÎãµÎ≥ÄÌïòÏÑ∏Ïöî.

**Ï§ëÏöîÌïú Í∑úÏπô:**
- Î¨∏ÏÑúÏóêÏÑú Ï∞æÏùÄ Ï†ïÎ≥¥Îßå ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî
- Î¨∏ÏÑúÏóê ÏóÜÎäî Ï†ïÎ≥¥Îäî Ï∂îÏ∏°ÌïòÏßÄ ÎßàÏÑ∏Ïöî
- Î¨∏ÏÑúÏóê Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ "Î¨∏ÏÑúÏóêÏÑú Ìï¥Îãπ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§"ÎùºÍ≥† ÎãµÎ≥ÄÌïòÏÑ∏Ïöî
- ÎãµÎ≥ÄÏùÄ ÌïúÍµ≠Ïñ¥Î°ú ÏûëÏÑ±ÌïòÏÑ∏Ïöî
- Ï∞∏Í≥† Î¨∏ÏÑú ÎßÅÌÅ¨Îäî Î≥ÑÎèÑÎ°ú Ï∂îÍ∞ÄÎêòÎØÄÎ°ú Ìè¨Ìï®ÌïòÏßÄ ÎßàÏÑ∏Ïöî`,
      },
    ];

    if (relevantDocs.length > 0) {
      console.log(
        `üìö Using ${relevantDocs.length} documents for context (similarity may be low)`
      );

      const context = relevantDocs
        .map(
          (doc, index) =>
            `Î¨∏ÏÑú ${index + 1} (${
              doc.originalFilename
            }, Ïú†ÏÇ¨ÎèÑ: ${doc.similarity.toFixed(3)}):\n${doc.content}`
        )
        .join("\n\n");

      messages.push({
        role: "user" as const,
        content: `Ï∞∏Í≥†Ìï† Î¨∏ÏÑúÎì§:\n${context}\n\nÏßàÎ¨∏: ${question}`,
      });
    } else {
      console.log("üìö No documents found, using general knowledge");
      messages.push({
        role: "user" as const,
        content: `Ï∞∏Í≥†Ìï† Î¨∏ÏÑúÍ∞Ä ÏóÜÏäµÎãàÎã§. ÏùºÎ∞òÏ†ÅÏù∏ ÏßÄÏãùÏúºÎ°ú Îã§Ïùå ÏßàÎ¨∏Ïóê ÎãµÎ≥ÄÌïòÏÑ∏Ïöî: ${question}`,
      });
    }

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages,
      max_tokens: 1000,
      temperature: 0.7,
    });

    let answer = completion.choices[0].message.content || "No answer provided";

    // Always add document links manually
    const docsWithLinks = relevantDocs.filter((doc) => doc.googleDriveId);
    if (docsWithLinks.length > 0) {
      answer += "\n\nüìÑ Ï∞∏Í≥† Î¨∏ÏÑú:\n";
      docsWithLinks.forEach((doc, index) => {
        const link = generateGoogleDriveLink(doc.googleDriveId!);
        answer += `${index + 1}. ${doc.originalFilename}: ${link}\n`;
      });
    } else if (relevantDocs.length > 0) {
      answer += "\n\nüìÑ Ï∞∏Í≥† Î¨∏ÏÑú: ÎßÅÌÅ¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.";
    }

    res.json({
      answer,
      hasRelevantDocs: relevantDocs.length > 0,
      documentCount: relevantDocs.length,
      documents: relevantDocs.map((doc) => ({
        filename: doc.originalFilename,
        similarity: doc.similarity,
        link: doc.googleDriveId
          ? generateGoogleDriveLink(doc.googleDriveId)
          : null,
      })),
    });
  } catch (error) {
    console.error("‚ùå Error in chat query:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});
